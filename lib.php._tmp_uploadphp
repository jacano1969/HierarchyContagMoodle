<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/* ConTag library file */

/* an explanation of "unique item keys"
 basically they're a way of uniquely referencing items, whether they are custom or not
 format is "type_id", where the id is either the custom-item-table id (for custom items), or some kind of resource/module id (to be determined by creation resolution functions)
 You can use contag_find_item_from_item_key with the appropriate flag(s) to resolve to the custom version of the item, if it exists.
 The item_id in the association table will ALWAYS refer to the custom-item-table id, not the resource/module-id etc
 */

error_reporting(E_ALL);
ini_set('display_errors', '1');

// constants
// for every type added, we need to add a table to the DB
$CONTAG_INBUILT_ITEM_TYPES = array('resource', 'quiz', 'lesson', 'glossary', 'wiki', 'forum');

// regular items
// Check to see whether the book module is installed
global $DB;

if ($DB -> get_record('modules', array('name' => 'book'))) {
	array_push($CONTAG_INBUILT_ITEM_TYPES, 'book');
}
$CONTAG_INBUILT_SUBITEM_TYPES = array();
// none yet, but these will be for specific types such as forum posts
$CONTAG_ONLY_CUSTOM_ITEM_TYPES = array('generic');
$CONTAG_ALL_ITEM_TYPES = array_merge($CONTAG_INBUILT_ITEM_TYPES, $CONTAG_INBUILT_SUBITEM_TYPES, $CONTAG_ONLY_CUSTOM_ITEM_TYPES);
$CONTAG_NO_TAG_KEY = '[no tag]';
// what we will use as the key for untagged items

$CONTAG_CUSTOM_ITEM_FIELDS = array('generic' => array('description', 'url'));
// useful for generating input forms

/** item type functions - to emulate polymorphism via switch (items need a 'type' field added, usually by 'contag_get_items_for_course') **/
// keep them in sync with the lists above
// can we instead have anonymous functions that we store in a map? So it becomes a table lookup?

function contag_get_custom_item_types() {
	global $CONTAG_ONLY_CUSTOM_ITEM_TYPES;
	return $CONTAG_ONLY_CUSTOM_ITEM_TYPES;
}

function contag_get_inbuilt_item_types() {
	global $CONTAG_INBUILT_ITEM_TYPES;
	return $CONTAG_INBUILT_ITEM_TYPES;
}

function contag_get_custom_item_fields_for_type($type) {
	global $CONTAG_CUSTOM_ITEM_FIELDS;
	return $CONTAG_CUSTOM_ITEM_FIELDS[$type];
}

function contag_get_item_display_name($item) {
	global $CONTAG_INBUILT_ITEM_TYPES;
	// check for cache
	if (isset($item -> generated_display_name)) {
		return $item -> generated_display_name;
	}

	$type = $item -> type;
	$res = 'NAME NOT FOUND';
	if (in_array($type, $CONTAG_INBUILT_ITEM_TYPES)) {
		$res =                 get_coursemodule_from_id($type, $item -> item_id) -> name;
	} else if ($type == 'generic') {
		$res = $item -> description;
	}
	return $res;
}

function contag_get_item_url($item) {
	global $CFG, $CONTAG_INBUILT_ITEM_TYPES;
	$type = $item -> type;
	$res = '';
	if (in_array($type, $CONTAG_INBUILT_ITEM_TYPES)) {
		$res = $CFG -> wwwroot . '/mod' . '/' . $type . '/view.php?id=' . $item -> item_id;
	} else if ($type == 'generic') {
		$res = $item -> url;
	}
	return $res;
}

// returns the *custom* table from item type
// if your type is non-custom, you may have to do resolution first
function contag_table_from_item_type($item_type) {
	return 'block_contag_item_' . $item_type;
}

// creates a key for the item that will be unique among all items (and appropriate for when the item is non-custom)
// type and id will be divided by a '_'
function contag_get_unique_item_key($item) {
	global $CONTAG_INBUILT_ITEM_TYPES;
	if (contag_is_custom_item_type($item -> type)) {
		return $item -> type . '_' . $item -> id;
	} else if (in_array($item -> type, $CONTAG_INBUILT_ITEM_TYPES)) {
		return $item -> type . '_' . $item -> item_id;
	}
}

// basically reversing the "get_unique_item_key" operation above
// returns two values - the item itself, and whether the item exists in a custom instance yet (always true for naturally custom elements)
// whereas for 'resources', there may be an inbuilt version, but not a custom instance yet
// if both resolve_to_custom and create_if_resolved_item_does_not_exist are true, then is_custom should always(?) be true, as custom instances will always be created when necessary.
// (unless item_key is out of date and can't find anything)
// If there is some error (db-interface sync and all), returns a list of (null,false)
// TODO NOTE: we are overloading the term custom here (i.e. inbuilt/custom type, vs inbuilt/custom instance in this case) - call this one something else!
function contag_find_item_from_item_key($item_key, $course_id, $resolve_to_custom_if_possible = false, $create_if_resolved_item_does_not_exist = false) {
	global $DB;
	// first split key once by '_' (starting at the end)
	$num_matches = preg_match('/^(.+)_([^_]+)$/', $item_key, $matches);
	if ($num_matches == 0) {// no match! Some error
		return array(null, false);
	}

	$item_type = $matches[1];
	$item_id = (int)$matches[2];
	// TODO: Is converting to a number necessary?

	if (contag_is_custom_item_type($item_type)) {
		// then the item is in the custom table
		$item = $DB -> get_record(contag_table_from_item_type($item_type), array('id' => $item_id));
		if ($item) {// ERROR CHECK
			$item -> type = $item_type;
			return array($item, true);
		} else {// the interface is out of sync with the db
			return array(null, false);
		}
	} else {// not custom item - inbuilt

		// NOW for the resolutions back to custom items
		if ($resolve_to_custom_if_possible) {
			// resolve
			$item = $DB -> get_record(contag_table_from_item_type($item_type), array('item_id' => $item_id));
			if ($item) {// found it!
				$item -> type = $item_type;
				return array($item, true);
			} else {// we want but CAN'T resolve (resolution doesn't already exist)
				// error-check that the item still exists (making sure interface is sync'd with db)
				if (!get_coursemodule_from_id($item_type, $item_id)) {
					return array(null, false);
					// doesn't exist, exit
				}

				// if create flag is true, then create
				if ($create_if_resolved_item_does_not_exist) {
					$item = new StdClass;
					$item -> item_id = $item_id;
					$item -> course_id = $course_id;
					try {
						$item_id = $DB -> insert_record(contag_table_from_item_type($item_type), $item);
					} catch (Exception $e) {
						return array(null, false);
						// an error, return!
					}

					$item -> type = $item_type;
					$item -> id = $item_id;
					return array($item, true);
				} else {// return non-resolved item
					return array(contag_inbuilt_to_temp_item(get_coursemodule_from_id($item_type, $item_id), $item_type), false);
				}
			}
		} else {// we don't want a resolution
			// error-check that the item still exists (making sure interface is sync'd with db)
			if (!get_coursemodule_from_id($item_type, $item_id)) {
				return array(null, false);
				// doesn't exist, exit
			}
			return array(contag_inbuilt_to_temp_item(get_coursemodule_from_id($item_type, $item_id), $item_type), false);
		}
	} // more resolutions can be added here, if need be
}

// creates a temp item (i.e. not necessarily in db, with no id)
// kind of cloning
// $item_from_db MUST exist
function contag_inbuilt_to_temp_item($item_from_db, $item_type) {
	// transfer the info to our custom type
	$item = new StdClass();
	$item -> type = $item_type;
	$item -> item_id = $item_from_db -> id;
	return $item;
}

/* returns all item records (normal and custom) available for this course */
// does two things - combines inbuilt moodle items and all custom item tables, and appends the type to them
function contag_get_items_for_course($course_id) {
	global $CONTAG_INBUILT_ITEM_TYPES, $DB;
	$res = array();

	// first grab the inbuilt ones
	foreach ($CONTAG_INBUILT_ITEM_TYPES as $intype) {
		foreach (contag_get_coursemodules_for_type($course_id, $intype) as $cm) {
			// it might not have an id (if it hasn't been tagged yet), so let's leave that for now
			$res[] = contag_inbuilt_to_temp_item($cm, $intype);
		}
	}

	// for each custom item table, pull out all items related to course, then append the type so we can switch on it later
	foreach (contag_get_custom_item_types() as $type) {
		$current_custom_items = $DB -> get_records(contag_table_from_item_type($type), array('course_id' => $course_id));
		foreach ($current_custom_items as $item) {
			$item -> type = $type;
			$res[] = $item;
		}
	}
	return $res;
}

// end type functions

// returns the item record
function contag_get_item_for_type_and_id($item_type, $item_id, $add_type) {
	global $DB;
	$record = $DB -> get_record(contag_table_from_item_type($item_type), array('id' => $item_id));
	if ($add_type) {
		$record -> type = $item_type;
	}
	return $record;
}

// this is useful to know - if it is not custom, we'll probably have to resolve it to an actual item (i.e. with resources)
// see contag_find_item_from_item_key
function contag_is_custom_item_type($item_type) {
	return in_array($item_type, contag_get_custom_item_types());
}

// adds an item of one of the custom types
// $item_object should be an object populated with the fields specific to that type
function contag_add_custom_item($item_object, $item_type, $course_id) {
	global $DB;
	$item_object -> course_id = $course_id;
	try {
		$DB -> insert_record(contag_table_from_item_type($item_type), $item_object);
	} catch (Exception $e) {
	}
}

// deletes an items from the contag db, plus all its associations
// if the item is of custom type, then it removes it completely, and it won't show any more
// if the item is inbuilt, it deletes the custom resolution (useful for deleting stale resolutions, once the resource etc itself is deleted)
function contag_delete_item($course_id, $item_key) {
	// remove all related associations then del
	global $DB;
	list($item, $is_custom_resolution) = contag_find_item_from_item_key($item_key, $course_id, true, false);
	if ($is_custom_resolution) {// error-checking - db-interface sync error if this fails (as there should *always* be a custom resolution for items we are deleting)
		$DB -> delete_records('block_contag_association', array('item_type' => $item -> type, 'item_id' => $item -> id));
		// delete associations first
		$DB -> delete_records(contag_table_from_item_type($item -> type), array('id' => $item -> id, 'course_id' => $course_id));
		// delete item itself - course_id check is extra security
	}
}

// returns all modules of type 'resources' in the course
function contag_get_coursemodules_for_type($course_id, $type) {
	$res = get_coursemodules_in_course($type, $course_id);
	return $res ? $res : array();
	// to guarantee it returns some kind of array
}

function contag_get_associations_for_tag($tag_id) {
	// 2.0: get_records now returns an empty array, not false, so we can just return that
	global $DB;
	return $DB -> get_records('block_contag_association', array('tag_id' => $tag_id));
}

// Returns: all tag records defined for this course
function contag_get_defined_tags($course_id) {
	global $DB;
	return $DB -> get_records('block_contag_tag', array('course_id' => $course_id));

}

function contag_get_tag_name($tag) {// property accessor (useful for callbacks)
	return $tag -> tag_name;
}

/* Ensures a tag exists (creates a tag with the given tagname if it doesn't already exist)
 * ASSUMPTION: tag_name already normalised (cleaned and validated)
 * Returns the tag record id */
function contag_ensure_tag($courseid, $tag_name, $tree_node_id, $normalized_url) {
	global $DB;
	$tag_id = contag_get_tag_id($courseid, $tag_name);

	if (!$tag_id) {// if it doesn't already exist
		// create it
		$contag_tag_object = new StdClass;
		$contag_tag_object -> course_id = $courseid;
		$contag_tag_object -> tag_name = $tag_name;
		if (isset($tree_node_id))//if it is send from the json data
		{
			$contag_tag_object -> tree_node_id = $tree_node_id;
		} else//if it is set from the attach_tags form
		{

			$contag_tag_object -> tree_node_id = append_node_to_json($contag_tag_object, $normalized_url);

		}
		try {
			$tag_id = $DB -> insert_record('block_contag_tag', $contag_tag_object);
			$item = $DB -> get_record('block_contag_tag', array('id' => $tag_id));

		} catch (Exception $e) {
			echo $e -> getMessage() . "\n";
			$tag_id = false;
		}
	}
	return $tag_id;
}

// cleans raw tag input string
// trims, inner spaces to '_', lowers
function contag_clean_tag_input($tag_string) {
	return strtolower(preg_replace('/ /', '_', trim($tag_string)));
}

// takes in a (cleaned!) tag input string, and validates whether it is a good name
function contag_validate_tag_name_as_good($tag_string) {
	// must contain only lowercase, only alpha chars (including no spaces), AND not empty
	//implemented for greek and latin characters

	$pattern = "/^[a-zA-Z\p{Greek}0-9\s\-]+$/u";
	$result = (bool) preg_match($pattern, $tag_string);
	// if($result)   throw new Exception($result);
	return $result;
}

// ensures an association exists - creates it if it doesn't
// creates any necessary tags and items as well
// ASSUMPTION: the $tag_name has been cleaned and validated as a good name (doesn't necessarily have to exist)
// should we check name in parent function (is_valid_name)?
function contag_add_association($course_id, $tag_name, $item_key, $normalized_url) {
	global $DB;
	$tag_id = contag_ensure_tag($course_id, $tag_name, NULL, $normalized_url);
	//NULL FOR tree_node_id is it doesnt have any. and we need to create it
	//ensure if it exists or create it

	list($item, $is_custom_resolution) = contag_find_item_from_item_key($item_key, $course_id, true, true);
	// will resolve and create if necessary
	if ($item && !$DB -> get_record('block_contag_association', array('tag_id' => $tag_id, 'item_type' => $item -> type, 'item_id' => $item -> id))) {// ERROR CHECK on $item, just in case it the module doesn't exist anymore (i.e. someone adding tags and someone else adding modules)
		// association doesn't exist, add it
		$contag_assoc_object = new StdClass;
		$contag_assoc_object -> tag_id = $tag_id;
		$contag_assoc_object -> item_type = $item -> type;
		$contag_assoc_object -> item_id = $item -> id;
		try {
			$DB -> insert_record('block_contag_association', $contag_assoc_object);
		} catch (Exception $e) {
		}
	}
}

function contag_delete_association($course_id, $item_key, $tag_id) {
	global $DB;
	if (contag_get_tag_from_tag_id($course_id, $tag_id)) {// ERROR CHECK - does it exist (and in this course)?
		list($item, $is_custom_resolution) = contag_find_item_from_item_key($item_key, $course_id, true);
		// should ALWAYS resolve in this case - ignore if not
		if ($is_custom_resolution) {// ERROR CHECK: if it didn't resolve, then we ignore
			$DB -> delete_records('block_contag_association', array('tag_id' => $tag_id, 'item_type' => $item -> type, 'item_id' => $item -> id));
			// delete association
		}
	}
}

function contag_get_tag_id($course_id, $tag_name) {
	global $DB;
	return $DB -> get_field('block_contag_tag', 'id', array('course_id' => $course_id, 'tag_name' => $tag_name));
}

function contag_get_tag_from_tag_id($course_id, $tag_id) {
	global $DB;
	return $DB -> get_record('block_contag_tag', array('id' => $tag_id, 'course_id' => $course_id));
	// extra security, as we're using tag ids
}

// deletes the tag, and any associations that it had
// using ids instead of names, as there's less chance of deleting a recreated tag (with the same name) if the URL is accidently called again

//TODO: marigianna: also delete i